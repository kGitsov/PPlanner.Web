@model PagedList.IPagedList<PPlanner.Models.UserStory>
@using PagedList.Mvc

@{
    Dictionary<string, string> resources = PPlanner.GetResources.GetResourcesFromDB();
}


<table class="table">
    <tbody>
        <tr>
            <th></th>
            <th class="col-sm-3">@resources["TasksTodayTitle"]</th>
            <th class="col-sm-2">@resources["TasksTodayUserEffort"]</th>
            <th class="col-sm-5">@resources["TasksTodayProjectName"]</th>
            <th class="col-sm-1">@resources["TasksTodayEffort"]</th>
        </tr>

    </tbody>
    <tbody>
        @if (Model.Count() != 0)
        {
            foreach (var item in Model)
            {

                <tr>
                    <td>
                        <a href="@Url.Action("Details", "Project", new { id = item.Project_ProjectId }, null)" class="btn btn-xs btn-default">
                            <span class="glyphicon glyphicon-eye-open"></span>
                        </a>
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Title)
                    </td>

                    <td>
                        @Html.DisplayFor(modelItem => item.User_Effort)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Project.Name)

                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Effort)

                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td>@resources["TasksTodayNothingToDo"]</td>
            </tr>
        }   

    </tbody>
</table>
@Html.PagedListPager(Model, page => Url.Action("Tasks", "Project",
new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }))
